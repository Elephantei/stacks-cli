# Azure DevOps pipeline file using Taskfile as the runner
# This is so that the main build and tests can be run in the same way
# on a local machine as well as in the CLI

# Set the name which will define the build number
name: 0.0$(Rev:.r)

# Set the agent pool that is going to be used for the build
pool:
  vmImage: ubuntu-20.04

variables:
  - template: azuredevops-vars.yml

stages:
  - stage: Build

    jobs:

    - job: Build
      steps:

      # Ensure using correct version of Golang
      # Required to perform the build of Stacks CLI
      - task: GoTool@0
        displayName: Setting GO Version
        inputs:
          version: ${{ variables.GoVersion }}

      # Install Taskfile for the build to run
      - task: Bash@3
        displayName: Install Taskfile
        inputs:
          targetType: inline
          script: |
            wget https://github.com/go-task/task/releases/download/v${{ variables.TaskfileVersion }}/task_linux_amd64.tar.gz -O /tmp/task.tar.gz
            tar zxf /tmp/task.tar.gz -C /usr/local/bin task 

      # Run the tasks to build the application
      - task: Bash@3
        displayName: Build & Test
        inputs:
          targetType: inline
          script: |
            export GOBIN=$HOME/go/bin
            export PATH=$PATH:$GOBIN
            task
            task docs
        env:
          BUILDNUMBER: $(Build.BuildNumber)
          OUTPUT_DIR: $(Build.SourcesDirectory)/outputs

      # Upload the tests and the coverage
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: JUnit
          testResultsFiles: $(Build.SourcesDirectory)/outputs/tests/report.xml

      - task: PublishCodeCoverageResults@1 
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(Build.SourcesDirectory)/outputs/tests/coverage.xml

      # Upload the binary files
      - task: PublishBuildArtifacts@1
        displayName: Publish Binaries
        inputs:
          pathToPublish: $(Build.SourcesDirectory)/outputs/bin
          artifactName: StacksCLI

      # Upload the documentation
      - task: PublishBuildArtifacts@1
        displayName: Publish Documentation
        inputs:
          pathToPublish: $(Build.SourcesDirectory)/outputs/docs
          artifactName: docs

  - stage: Release

    variables:
      - group: amido-stacks-cli

    jobs:

    - job: CreateGHRelease

      steps:

        # Download the necessary artifacts from the previous stage
        # - documentation
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'docs'
            patterns: '**/*.pdf'
            path: $(Build.ArtifactsStagingDirectory)/assets

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: 'StacksCLI'
            path: $(Build.ArtifactsStagingDirectory)/assets

        # Ensure using correct version of Golang
        # Required to perform the build of Stacks CLI
        - task: GoTool@0
          displayName: Setting GO Version
          inputs:
            version: ${{ variables.GoVersion }}

        # Install Taskfile for the build to run
        - task: Bash@3
          displayName: Install Taskfile
          inputs:
            targetType: inline
            script: |
              wget https://github.com/go-task/task/releases/download/v${{ variables.TaskfileVersion }}/task_linux_amd64.tar.gz -O /tmp/task.tar.gz
              tar zxf /tmp/task.tar.gz -C /usr/local/bin task 

        # Run the tasks to build the application
        - task: Bash@3
          displayName: Release
          inputs:
            targetType: inline
            script: |
              export GOBIN=$HOME/go/bin
              export PATH=$PATH:$GOBIN
              task release
          env:
            VERSION_NUMBER: $(Build.BuildNumber)
            API_KEY: $(API_KEY)
            NOTES:
            COMMIT_ID: $(Build.SourceVersion)  
            DRAFT: 1
            ARTIFACTS_DIR: $(Build.ArtifactsStagingDirectory)/assets